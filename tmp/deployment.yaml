################################
# backend
################################
---
# https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eks-work-app-backend  # リソース名 (名前空間内で一意でなければならない)
spec:
  replicas: 3
  selector:
    matchLabels:
      # このラベルと一致する spec.template.metadata.labels を持つ Pod がレプリカセットの対象となる
      app: eks-work-app-backend
  template:
    metadata:
      labels:
        app: eks-work-app-backend
    spec:
      containers:
      - name: eks-work-app-backend
        image: 674582907715.dkr.ecr.ap-northeast-1.amazonaws.com/eks-work-app/backend:latest
        command: ["/usr/local/bin/entrypoint.sh"]
        ports:
        - containerPort: 8000

---
# https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/
apiVersion: v1
kind: Service
metadata:
  name: backend-eks-work-app-service
spec:
  selector:
    # このセレクタにマッチするラベルキーと値を持つポッドにサービストラフィックをルーティングします。
    app: eks-work-app-backend
  ports:
  - port: 8000

################################
# frontend
################################
---
# https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eks-work-app-frontend  # リソース名 (名前空間内で一意でなければならない)
spec:
  replicas: 3
  selector:
    matchLabels:
      # このラベルと一致する spec.template.metadata.labels を持つ Pod がレプリカセットの対象となる
      app: eks-work-app-frontend
  template:
    metadata:
      labels:
        app: eks-work-app-frontend
    spec:
      containers:
      - name: eks-work-app-frontend
        image: 674582907715.dkr.ecr.ap-northeast-1.amazonaws.com/eks-work-app/frontend:latest
        command: ["/usr/local/bin/entrypoint.sh"]
        ports:
        - containerPort: 3000

---
# https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/
apiVersion: v1
kind: Service
metadata:
  name: frontend-eks-work-app-service
spec:
  selector:
    # このセレクタにマッチするラベルキーと値を持つポッドにサービストラフィックをルーティングします。
    app: eks-work-app-frontend
  ports:
  - port: 3000

################################
# nginx
################################
---
# https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eks-work-app-nginx  # リソース名 (名前空間内で一意でなければならない)
spec:
  replicas: 2
  selector:
    matchLabels:
      # このラベルと一致する spec.template.metadata.labels を持つ Pod がレプリカセットの対象となる
      app: eks-work-app-nginx
  template:
    metadata:
      labels:
        app: eks-work-app-nginx
    spec:
      containers:
      - name: eks-work-app-nginx
        image: 674582907715.dkr.ecr.ap-northeast-1.amazonaws.com/eks-work-app/nginx:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: eks-work-app-nginx-service
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  type: NodePort
  selector:
    # このセレクタにマッチするラベルキーと値を持つポッドにサービストラフィックをルーティングします。
    app: eks-work-app-nginx


################################
# alb
################################
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  annotations:
    # 外部LB(internet-facing)にするか、内部LB(internal)にするか
    #   - https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.7/guide/ingress/annotations/#scheme
    #   - https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/how-elastic-load-balancing-works.html#load-balancer-scheme
    alb.ingress.kubernetes.io/scheme: internet-facing

    # Podへのトラフィックのルーティング方法を指定します。
    #   - https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.7/guide/ingress/annotations/#target-type
    #     - instance (default)
    #       ALBからのトラフィックはNodePortを経由してPodに到達する
    #     - ip
    #       ALBからのトラフィックを直接Pod IPにルーティングする
    alb.ingress.kubernetes.io/target-type: instance

    # LBにアタッチしたいセキュリティグループをidもしくはNameタグで指定します。
    #   - https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.7/guide/ingress/annotations/#security-groups
    alb.ingress.kubernetes.io/security-groups: alb, internal

    # このアノテーションは alb.ingress.kubernetes.io/security-groups でSGを指定した場合にのみ適用されます。
    # true に設定すると、コントローラはロードバランサに追加の共有バックエンドセキュリティグループをアタッチします。
    # このバックエンドセキュリティグループは Node/Pod セキュリティグループルールで使われます。
    #   - https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.7/guide/ingress/annotations/#manage-backend-security-group-rules
    alb.ingress.kubernetes.io/manage-backend-security-group-rules: "true"
spec:
  defaultBackend:
    service:
      name: eks-work-app-nginx-service
      port:
        number: 80
        
  ingressClassName: alb
  rules:
    - http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: eks-work-app-nginx-service
              port:
                number: 80